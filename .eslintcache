[{"C:\\Users\\biggd\\Documents\\proggramming\\src\\index.js":"1","C:\\Users\\biggd\\Documents\\proggramming\\src\\viewPage\\Profile\\Profile.js":"2","C:\\Users\\biggd\\Documents\\proggramming\\src\\viewPage\\MessagePage\\MessagePage.js":"3","C:\\Users\\biggd\\Documents\\proggramming\\src\\Api.js":"4"},{"size":520,"mtime":1605962321751,"results":"5","hashOfConfig":"6"},{"size":1887,"mtime":1606422112316,"results":"7","hashOfConfig":"6"},{"size":2822,"mtime":1605982052268,"results":"8","hashOfConfig":"6"},{"size":807,"mtime":1605962321749,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19jj0vg",{"filePath":"12","messages":"13","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\biggd\\Documents\\proggramming\\src\\index.js",[],"C:\\Users\\biggd\\Documents\\proggramming\\src\\viewPage\\Profile\\Profile.js",["19","20","21","22"],"C:\\Users\\biggd\\Documents\\proggramming\\src\\viewPage\\MessagePage\\MessagePage.js",["23","24","25","26"],"import React from 'react'\r\nimport style from './MessagePage.module.css'\r\nimport close_button from './images/close_button.png'\r\nimport {getRequest, postRequest, GET_MESSAGE_AND_SEND} from '../../Api'\r\nimport { useForm } from \"react-hook-form\";\r\n\r\n\r\nfunction MessagePage({nameMatchHeader_, closeClick}) {\r\n    const [messages, setMessages] = React.useState()\r\n    const [colorButton, setColorButton] = React.useState(\"#e0e4e9\")\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const onSubmit = data => {\r\n        data.name = \"Niktia\"\r\n        data.mod = \"from_me\"\r\n        sendMessageAndGet(data)\r\n        \r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let data = {}\r\n        data.name = \"\"\r\n        data.messageText = \"\"\r\n        data.mod = \"\"\r\n        sendMessageAndGet(data)\r\n      }, [])\r\n\r\n\r\n    const sendMessageAndGet = async (_date) => {\r\n        await postRequest(GET_MESSAGE_AND_SEND, _date).then(function (responce) {\r\n            console.log(responce['data'])\r\n            setMessages(responce['data'])\r\n        })\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        if(e.target.value !== \"\") setColorButton(\"linear-gradient(262deg, #ff7854, #fd267d)\")\r\n        else setColorButton(\"#e0e4e9\")\r\n      }\r\n\r\n    return(\r\n        <div className = {style.MessageContent}>\r\n            <div className = {style.Header}>\r\n                <div className = {style.MessageAvatar}>\r\n                    <img src = \"https://sun1-94.userapi.com/wp53UENcImsM0HeU1cIbV11p59rHiboXGykIsg/9fm_uvRmQRA.jpg\" width = \"36\" height = \"36\" />\r\n                </div>\r\n                <div className = {style.MessageName}>\r\n                    Вы и {nameMatchHeader_} образовали пару\r\n                </div>\r\n                <div onClick = {() => closeClick && closeClick()} className = {style.CloseButton}>\r\n                    <img src = {close_button} width = \"36\" height = \"36\"/>\r\n                </div>\r\n            </div>\r\n            <div className = {style.MessageWindow}>\r\n                {messages ? messages.map((val) => {\r\n                    return  <div className = {val.mod == \"from_me\" ? style.FromMe : style.ToMe}>{val.message}  <span style = {{color: \"black\"}}>:{val.name}</span></div>\r\n                }): \"\"}\r\n            </div>\r\n            \r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div className = {style.MessageSend}>\r\n                    {errors.messageText && \"\"}\r\n                    <input onChange={handleChange} autocomplete=\"off\" name=\"messageText\" ref={register({required : true})} placeholder = \"Введите сообщение\"/>\r\n                    <button style = {{background: colorButton}} type=\"submit\">Отправить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessagePage","C:\\Users\\biggd\\Documents\\proggramming\\src\\Api.js",[],{"ruleId":"27","severity":1,"message":"28","line":8,"column":10,"nodeType":"29","endLine":8,"endColumn":203},{"ruleId":"27","severity":1,"message":"28","line":9,"column":10,"nodeType":"29","endLine":9,"endColumn":202},{"ruleId":"27","severity":1,"message":"28","line":10,"column":10,"nodeType":"29","endLine":10,"endColumn":202},{"ruleId":"27","severity":1,"message":"28","line":11,"column":10,"nodeType":"29","endLine":11,"endColumn":200},{"ruleId":"30","severity":1,"message":"31","line":4,"column":9,"nodeType":"32","messageId":"33","endLine":4,"endColumn":19},{"ruleId":"27","severity":1,"message":"28","line":45,"column":21,"nodeType":"29","endLine":45,"endColumn":146},{"ruleId":"27","severity":1,"message":"28","line":51,"column":21,"nodeType":"29","endLine":51,"endColumn":75},{"ruleId":"34","severity":1,"message":"35","line":56,"column":55,"nodeType":"36","messageId":"37","endLine":56,"endColumn":57},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'getRequest' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]